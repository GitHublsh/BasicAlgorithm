//堆排序


*****************************************************C*****************************************************
#include <stdio.h>
 
void swap(int *a, int *b);
void adjustHeap(int param1,int j, int inNums[]);
void  HeapSort(int nums, int inNums[]);
//大根堆进行调整
void adjustHeap(int param1, int j, int inNums[])
{
    int temp=inNums[param1];
    for (int k=param1*2+1;k<j;k=k*2+1)
    {
        //如果右边值大于左边值，指向右边
        if (k+1<j && inNums[k]< inNums[k+1])
        {
            k++;
        }
        //如果子节点大于父节点，将子节点值赋给父节点,并以新的子节点作为父节点（不用进行交换）
        if (inNums[k]>temp)
        {
            inNums[param1]=inNums[k];
            param1=k;
        }
        else
            break;
    }
        //put the value in the final position
    inNums[param1]=temp;
}
//堆排序主要算法
void HeapSort(int nums,int inNums[])
{
    //1.构建大顶堆
    for (int i=nums/2-1;i>=0;i--)
    {
                //put the value in the final position
        adjustHeap(i,nums,inNums);
    }
    //2.调整堆结构+交换堆顶元素与末尾元素
    for (int j=nums-1;j>0;j--)
    {
                //堆顶元素和末尾元素进行交换
        int temp=inNums[0];
        inNums[0]=inNums[j];
        inNums[j]=temp;
 
        adjustHeap(0,j,inNums);//重新对堆进行调整
    }
}
int main() {
    int data[] = {6,5,8,4,7,9,1,3,2};
    int len = sizeof(data) / sizeof(int);
    HeapSort(len,data);
    return 0;
}

*****************************************************JAVA*****************************************************


public  void heapSort(int[] a){
             int len=a.length;
             //循环建堆  
             for(int i=0;i<len-1;i++){
                 //建堆  
                 buildMaxHeap(a,len-1-i);
                 //交换堆顶和最后一个元素  
                 swap(a,0,len-1-i);
             }
        }
         //交换方法
        private  void swap(int[] data, int i, int j) {
            int tmp=data[i];
            data[i]=data[j];
            data[j]=tmp;
        }
        //对data数组从0到lastIndex建大顶堆  
        private void buildMaxHeap(int[] data, int lastIndex) {
            //从lastIndex处节点（最后一个节点）的父节点开始  
            for(int i=(lastIndex-1)/2;i>=0;i--){
                //k保存正在判断的节点  
                int k=i;
                //如果当前k节点的子节点存在  
                while(k*2+1<=lastIndex){
                    //k节点的左子节点的索引  
                    int biggerIndex=2*k+1;
                    //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在  
                    if(biggerIndex<lastIndex){
                        //若果右子节点的值较大  
                        if(data[biggerIndex]<data[biggerIndex+1]){
                            //biggerIndex总是记录较大子节点的索引  
                            biggerIndex++;
                        }
                    }
                    //如果k节点的值小于其较大的子节点的值  
                    if(data[k]<data[biggerIndex]){
                        //交换他们  
                        swap(data,k,biggerIndex);
                        //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  
                        k=biggerIndex;
                    }else{
                        break;
                    }
                }
            }
        }

